#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Buddy‚Äëbot for Telegram ‚ûú Fly.io.

‚Ä¢ health‚Äë—á–µ–∫  /                                 ‚Üí 200¬†OK  
‚Ä¢ —Å–ª—É—à–∞–µ—Ç      0.0.0.0:8080                     ‚Üí –ø—Ä–æ—Ö–æ–¥–∏—Ç smoke‚Äëcheck  
‚Ä¢ PTB‚ÄØv20      –±–µ–∑ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤  
‚Ä¢ –ø—Ä–∏–º–µ—Ä tick‚Äë–¥–∂–æ–±–∞ —á–µ—Ä–µ–∑ APScheduler
"""

import os
import logging
from functools import partial

from aiohttp import web
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger


# ---------------------------------------------------------------------------
# ENV‚Äë–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
# ---------------------------------------------------------------------------
BOT_TOKEN = os.environ["BOT_TOKEN"]                         # export BOT_TOKEN=...
APP_NAME = os.getenv("FLY_APP_NAME", "my-buddy")
PORT = int(os.getenv("PORT", 8080))
PUBLIC_URL = f"https://{APP_NAME}.fly.dev"                  # –∞–¥—Ä–µ—Å –¥–ª—è Telegram

ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0")) or None  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
)
logger = logging.getLogger("buddy-bot")


# ---------------------------------------------------------------------------
# Handlers
# ---------------------------------------------------------------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")


async def health(_: web.Request) -> web.Response:
    return web.Response(text="ok")


async def tick(bot, *_):
    if ADMIN_CHAT_ID:
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text="‚úÖ tick()")
        logger.info("Tick sent")


# ---------------------------------------------------------------------------
# post_init ¬≠‚Äì –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Application
# ---------------------------------------------------------------------------
async def post_init(app: Application) -> None:
    # 1) health‚Äë—Ä–æ—É—Ç
    app.web_app.router.add_get("/healthz", health)
    logger.info("Health route / –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

    # 2) –∑–∞–ø—É—Å–∫ APScheduler
    sch = AsyncIOScheduler(timezone="UTC")
    sch.add_job(
        partial(tick, app.bot),
        trigger=IntervalTrigger(minutes=1),
        id="tick",
        max_instances=1,
        coalesce=True,
    )
    sch.start()
    logger.info("APScheduler –∑–∞–ø—É—â–µ–Ω")


# ---------------------------------------------------------------------------
# bootstrap
# ---------------------------------------------------------------------------
def main() -> None:
    application = (
        Application.builder()
        .token(BOT_TOKEN)
        .post_init(post_init)
        .build()
    )

    application.add_handler(CommandHandler("start", cmd_start))

    logger.info("–ó–∞–ø—É—Å–∫–∞—é run_webhook()")
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        path=f"/{BOT_TOKEN}",
        webhook_url=f"{PUBLIC_URL}/{BOT_TOKEN}",
        drop_pending_updates=True,
    )


if __name__ == "__main__":
    main()
